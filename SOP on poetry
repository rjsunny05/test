Hereâ€™s your **Poetry SOP** content converted into a clean, styled HTML document you can use for your `README.md` on GitHub (or anywhere else that renders HTML):

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Poetry SOP - Standard Operating Procedure</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      line-height: 1.6;
      padding: 40px;
      max-width: 900px;
      margin: auto;
      background: #ffffff;
    }
    h1, h2, h3 {
      color: #2c3e50;
    }
    pre {
      background-color: #f4f4f4;
      border-left: 4px solid #ccc;
      padding: 10px;
      overflow-x: auto;
    }
    code {
      background-color: #eee;
      padding: 2px 4px;
      font-family: monospace;
    }
    hr {
      margin: 40px 0;
      border: none;
      border-top: 1px solid #ddd;
    }
    ul {
      margin-left: 20px;
    }
  </style>
</head>
<body>

  <h1>Standard Operating Procedure (SOP) for Poetry</h1>
  <p>Covering project setup, dependency management, virtual environments, and command execution:</p>

  <hr>

  <h2>1. Installing Poetry</h2>
  <pre><code># Official install (Unix/macOS)
curl -sSL https://install.python-poetry.org | python3 -

# Windows (PowerShell)
(Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | python -

# Verify installation
poetry --version
</code></pre>

  <hr>

  <h2>2. Creating a New Project</h2>
  <pre><code># Create a new project (interactive)
poetry new &lt;project-name&gt;

# Create with a specific Python version
poetry env use python3.9  # Optional upfront

# Initialize Poetry in an existing project
cd existing-project
poetry init  # Follow prompts
</code></pre>

  <hr>

  <h2>3. Managing Dependencies</h2>
  <pre><code># Add a dependency
poetry add &lt;package&gt;  # e.g., poetry add numpy

# Add development dependency
poetry add --group dev &lt;package&gt;  # e.g., poetry add --group dev pytest

# Remove a dependency
poetry remove &lt;package&gt;

# Update dependencies
poetry update  # All packages
poetry update &lt;package&gt;  # Specific package

# List installed packages
poetry show --tree
</code></pre>

  <hr>

  <h2>4. Virtual Environment Management</h2>
  <pre><code># Create/use a virtualenv (auto-generated by default)
poetry install  # Creates venv if missing, installs deps

# Activate the virtualenv
poetry shell

# Deactivate (inside the shell)
exit

# List virtualenvs
poetry env list

# Remove a virtualenv
poetry env remove &lt;python-version|name&gt;
</code></pre>

  <hr>

  <h2>5. Running Commands in Context</h2>
  <pre><code># Run a script in the Poetry environment
poetry run python script.py

# Execute one-off commands (e.g., pytest)
poetry run pytest

# Run with environment variables
poetry run env VAR=value python script.py
</code></pre>

  <hr>

  <h2>6. Building & Publishing</h2>
  <pre><code># Build the project
poetry build  # Creates dist/ files

# Publish to PyPI (requires credentials)
poetry publish  # Add --repository &lt;repo-name&gt; for private repos
</code></pre>

  <hr>

  <h2>7. Configuration (Optional)</h2>
  <pre><code># Disable virtualenv creation (global)
poetry config virtualenvs.create false

# Change virtualenvs path
poetry config virtualenvs.path /path/to/venvs
</code></pre>

  <hr>

  <h2>8. Best Practices</h2>
  <ul>
    <li><strong><code>pyproject.toml</code></strong>: Always edit this file manually for complex configurations (e.g., scripts, classifiers).</li>
    <li><strong>Lockfile</strong>: Commit <code>poetry.lock</code> to ensure reproducible builds.</li>
    <li><strong>CI/CD</strong>: Use <code>poetry install --no-dev</code> in production environments.</li>
  </ul>

  <hr>

  <h2>Troubleshooting</h2>
  <ul>
    <li><strong>"Project not initialized"</strong>: Run <code>poetry init</code> in the project root.</li>
    <li><strong>Dependency conflicts</strong>: Use <code>poetry update</code> or manually resolve in <code>pyproject.toml</code>.</li>
  </ul>

  <hr>

  <p>This SOP ensures consistent usage of Poetry across development, testing, and deployment workflows. Adjust Python/package names as needed.</p>

</body>
</html>
```

Let me know if you'd like it styled for **GitHub-flavored Markdown** instead (since GitHub typically uses `.md` rendering, not raw HTML).
